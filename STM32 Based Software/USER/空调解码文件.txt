#include "remote.h"
#include "delay.h"
#include "usart.h"
#include "led.h"
//////////////////////////////////////////////////////////////////////////////////	 
//本程序只供学习使用，未经作者许可，不得用于其它任何用途
//ALIENTEK战舰STM32开发板
//红外遥控解码驱动 代码	   
//正点原子@ALIENTEK
//技术论坛:www.openedv.com
//修改日期:2012/9/12
//版本：V1.0
//版权所有，盗版必究。
//Copyright(C) 广州市星翼电子科技有限公司 2009-2019
//All rights reserved									  
//////////////////////////////////////////////////////////////////////////////////

//红外遥控初始化
//设置IO以及定时器4的输入捕获
void Remote_Init(void)    			  
{  
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_ICInitTypeDef  TIM_ICInitStructure;  
 
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE); //使能PORTB时钟 
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);	//TIM4 时钟使能 

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;				 //PB9 输入 
 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; 		//上拉输入 
 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 	GPIO_SetBits(GPIOB,GPIO_Pin_9);	//初始化GPIOB.9
	
						  
 	TIM_TimeBaseStructure.TIM_Period = 50000; //设定计数器自动重装值 最大10ms溢出  
	TIM_TimeBaseStructure.TIM_Prescaler =(72-1); 	//预分频器,1M的计数频率,1us加1.	   	
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //设置时钟分割:TDTS = Tck_tim
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure); //根据指定的参数初始化TIMx

  TIM_ICInitStructure.TIM_Channel = TIM_Channel_4;  // 选择输入端 IC4映射到TI4上
  TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;	//上升沿捕获
  TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
  TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	 //配置输入分频,不分频 
  TIM_ICInitStructure.TIM_ICFilter = 0x03;//IC4F=0011 配置输入滤波器 8个定时器时钟周期滤波
  TIM_ICInit(TIM4, &TIM_ICInitStructure);//初始化定时器输入捕获通道

  //TIM_Cmd(TIM4,ENABLE ); 	//使能定时器4
 
	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;  //TIM3中断
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;  //先占优先级0级
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;  //从优先级3级
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器	

	TIM_ITConfig( TIM4,TIM_IT_Update|TIM_IT_CC4,ENABLE);//允许更新中断 ,允许CC4IE捕获中断	

}

u8 ReceiveStartBit=0;
u8 ReceiveBitCount=0;
u8 ReceiveOtherBit=0;
u8 ReceiveConnectBit=0;
u8 ReceiveData[32]={0};
void recJudge(u16 time){

	if(time>4200&&time<4700)
	{
		//ReceiveBitCount=0;
		ReceiveStartBit++;
	}
	else if(time>1400&&time<1900)
	{
		ReceiveData[ReceiveBitCount/8]>>=1;
		ReceiveData[ReceiveBitCount/8]|=0x80;
		
		ReceiveBitCount++;
	}
	else if(time>300&&time<800)
	{
		ReceiveData[ReceiveBitCount/8]>>=1;
		ReceiveData[ReceiveBitCount/8]&=0x7f;
		ReceiveBitCount++;
	}
	else if(time>19000&&time<21000)
	{
		ReceiveConnectBit++;
	}
	else
	{
		ReceiveOtherBit++;
	}
	
}

u8 time4Ch4ICPolarity=0;
void TIM4_IRQHandler(void){
	if(TIM_GetITStatus(TIM4,TIM_IT_CC4))
	{	
		TIM_ClearITPendingBit(TIM4,TIM_IT_CC4);
		if(time4Ch4ICPolarity==0){
			TIM_SetCounter(TIM4,0);
			//设置下降沿
			TIM_OC4PolarityConfig(TIM4,TIM_OCPolarity_Low);
			time4Ch4ICPolarity=1;
			//使能计数器
			TIM_Cmd(TIM4,ENABLE);
		}
		else{
			u16 time;
			time=TIM_GetCapture4(TIM4);
			recJudge(time);
			//设置上降沿
			TIM_OC4PolarityConfig(TIM4,TIM_OCPolarity_High);
			time4Ch4ICPolarity=0;
			//失能计数器
			TIM_Cmd(TIM4,DISABLE);
		}
	}
	if(TIM_GetITStatus(TIM4,TIM_IT_Update))
	{	
		TIM_ClearITPendingBit(TIM4,TIM_IT_Update);
		//失能计数器
		TIM_Cmd(TIM4,DISABLE);
		//设置上降沿
		TIM_OC4PolarityConfig(TIM4,TIM_OCPolarity_High);
		time4Ch4ICPolarity=0;
	}
}


void getGetliSendCode(u8 *recData)
{
	u8 i=0,j=0;
	u32 dataTemp;
	printf("\r\n");
	for(i=0;i<134;i++){
		if(i%8==0)
		{
			dataTemp=recData[i/8];
		}
		if(j%8==0)
			printf("  ");

		if(i<128)
		{
			if(dataTemp&0x01)
				printf("%c",'1');
			else
				printf("%c",'0');
		}
		else{
			if(dataTemp&0x04)
				printf("%c",'1');
			else
				printf("%c",'0');
		}
			
		dataTemp>>=1;
	
		j++;	
		if(i==66)
		{	
			printf("\r\n");
			j=0;
		}
		
	}
	printf("\r\n");
}

//处理红外键盘
//返回值:
//	 0,没有任何按键按下
//其他,按下的按键键值.
u8 Remote_Scan(void)
{    
	u8 i=0;
	if(ReceiveBitCount==134 || ReceiveBitCount==32)
		LED1=~LED1;
	getGetliSendCode(ReceiveData);	
	ReceiveStartBit=0;
	ReceiveBitCount=0;
	ReceiveOtherBit=0;
	ReceiveConnectBit=0;
	for(i=0;i<32;i++)
		ReceiveData[i]=0;
}






























